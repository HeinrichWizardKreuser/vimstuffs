set number
set pastetoggle=<F2>
set autoindent
set shiftwidth=4		" sets tabs in visual mode tabbing
set tabstop=4
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set visualbell 			" to disable sounds
set t_vb= 				
"Opens vim at last edited line
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" search function in insertmode
inoremap <C-F> <ESC>/
nnoremap <C-F> /
" sets ctrl-c to copying text in visual mode
vnoremap <C-C> yi
" WARNING: DON't REMAP C-C due to it stopping errors
vnoremap i <ESC>i
vnoremap v <C-V>
" sets ctrl-v to pasting the current buffer for normal and insert mode, always ends in insert mode
inoremap <C-V> <ESC>gpi
nnoremap <C-V> gpi
" to paste over highlighted text
vnoremap <C-V> pi<RIGHT>
" TODO: make backspace over highlighted text: must not save deleted lines to buffer, must keep old buffer contents"
"vnoremap <BS> <blackholedelete>
" sets ctrl-up/down in insert/normal mode to move single line up or down. always ends in insert mode
inoremap <C-UP> <ESC>:m .-2<CR>==i
inoremap <C-DOWN> <ESC>:m .+1<CR>==i
nnoremap <C-UP> :m .-2<CR>==i
nnoremap <C-DOWN> :m .+1<CR>==i
" sets ctrl-up/down in visual mode to move all lines highlighted up/down
vnoremap <C-UP> :m '<-2<CR>gv=gv
vnoremap <C-DOWN> :m '>+1<CR>gv=gv
" sets ctrl-x to cut the entire line. Cursor will spawn at the end of the original cutted line
"inoremap <C-X> <END><ESC>v<UP><END>di<DOWN><END>
inoremap <C-X> <ESC>v<S-V>di
vnoremap <C-X> d
nnoremap <C-X> <END>v<UP><END>di<DOWN><END>
" sets ctr-l to copying the entire line
inoremap <C-L> <ESC>mav<S-V>y`a<RIGHT>i
" helps for highlighting stuff:
	" arrows
inoremap <S-LEFT> <ESC>v
nnoremap <S-LEFT> i<ESC>v
vnoremap <S-LEFT> h
inoremap <S-RIGHT> <ESC>lvl
nnoremap <S-RIGHT> vl
vnoremap <S-RIGHT> l
inoremap <S-UP> <ESC>v<UP>
nnoremap <S-UP> i<ESC>v<UP>
vnoremap <S-UP> <UP> 
inoremap <S-DOWN> <ESC>v<DOWN>
nnoremap <S-DOWN> v<DOWN>
vnoremap <S-DOWN> <DOWN>
	" other
inoremap <S-HOME> <ESC>v<HOME>
inoremap <S-END> <ESC>lv<END>
" tabbing highlighted text
vnoremap <TAB> >gv
vnoremap <S-TAB> <gv
inoremap <S-TAB> <BS>
" scrolling up or down
inoremap <A-UP> <ESC>6<UP>i<RIGHT>
inoremap <A-DOWN> <ESC>6<DOWN>i<RIGHT>
nnoremap <A-UP> 6<UP>i
nnoremap <A-DOWN> 6<DOWN>i
" sets basic undo and redo mappings to what we're used to
inoremap <C-Z> <Esc>ui
inoremap <C-Y> <Esc><C-R>li
nnoremap <C-Z> ui
vnoremap <C-Z> <ESC>u
" sets ctrl-w what we're used to as ctrl-s in all modes
nnoremap <C-W> :w<CR>
inoremap <C-W> <ESC>:w<CR>hi
vnoremap <C-W> <ESC>:w<CR>hi
" sets ctrl-e to saving and exiting the file
inoremap <C-E> <ESC>:wq<CR>
nnoremap <C-E> :wq<CR>
" when in normal mode to edit something, go to insert mode for del, bs, enter, end, home etc
  " WARNING: only do the following in nnoremap. too dangerous in others such as visual mode
nnoremap <BS> i<BS>
vnoremap <BS> <ESC>i<BS>
nnoremap <END> i<END>
nnoremap <HOME> i<HOME>
"nnoremap <DEL> i<DEL>
nnoremap <CR> i<RIGHT><CR>
" When at end of line in normal mode and press arrow right, go t oinsert mode and go right
nnoremap <expr> <RIGHT> <sid>curs_ln_end() ? '<RIGHT>' : 'i<RIGHT>'
inoremap <expr> <C-_> <sid>filetype_comment()
function! s:filetype_comment() abort
	" get entire line
	let getline = getline('.')
	" get filetype
	let ft = &filetype
	echom "ft = " . ft
	" for c
	if 1 " TODO: make comment based on the filetype
	"if ft ==# 'vim'
		" check if line already has comment
		echom 0
		if stridx(getline, '/*') != -1 && stridx(getline, '*/') != -1
			echom 2
			" remove comment from line
			return "\<ESC>\<RIGHT>mai\<END>\<BS>\<BS>\<HOME>\<DEL>\<DEL>\<ESC>`ai"
		else
			echom 1
			" then line has doesn't have comment
			return "\<ESC>ma\<HOME>i/*\<END>*/\<ESC>`a3li"
		endif
	endif
	return ''
	"TODO: make comment based on the filetype
	" find comment based on filetype
	"let comments_dict = {'python': '#'}
	"if !has_key(comments_dict, ft)
	"	return ''
	"endif
	" else we have key so we add comment
	"let comment = comments_dict[ft]
	" add comment at start of line
	"return "\<ESC>\<RIGHT>ma\<HOME>" . comment . "\<SPACE>`a"
endfunction
"
"_______________________________________AUTO_COMPLETION________________________________________
" press tab and it will autocomplet the word you are currently typing.
" If there are more than one word you could be typing, it brings up more options
" If it sees that you are not typing a word, it will just be normal 'TAB'
function! Smart_TabComplete()
	let line = getline('.')                         " current line
	let substr = strpart(line, -1, col('.')+1)      " from the start of the current line to one character right of the cursor
	let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
	if (strlen(substr)==0 || strlen(substr)==1)     " nothing to match on empty string
		return "\<tab>"
	endif
	let has_period = match(substr, '\.') != -1      " position of period, if any
	let has_slash = match(substr, '\/') != -1       " position of slash, if any
	if (!has_period && !has_slash)
		return "\<C-X>\<C-P>"                         " existing text matching
	elseif ( has_slash )
		return "\<C-X>\<C-F>"                         " file matching
	else
		return "\<C-X>\<C-O>"                         " plugin matching
	endif
endfunction
inoremap <tab> <c-r>=Smart_TabComplete()<CR>
"_______________________________________HELPER_FUNCTIONS________________________________________"
" curs_char() returns the current character the cursor is on
	" getline('.') gets the current line as a string. 
	" the split part makes the string into an array of characters. 
	" col gets the column number of the cursor (index starts at 1, not 0, thus we have the -1 at the end)
	" 's:' says that this function can be called in other functions in this [s]cript
	" '!' sets to ignore any keybindings of vimrc, useful for universalness. 
function! s:curs_char() abort 
	return split((getline('.') . " "), '\zs')[col('.')-1]
endfunction
" converts the given string to a list
function! s:str_list(stringy) abort
	return split(a:stringy, '\zs')
endfunction
" tells us whether the cursor is at the end of the line
function! s:curs_ln_end() abort
	return strlen(getline('.')) != col('.')
endfunction
" checks whether a given brace is an opening brace
function! s:is_opening_brace(brace) abort
	return a:brace == '[' || a:brace == '('
endfunction
" gets the open brace of the given brace
function! s:get_opening_brace(brace) abort
	if a:brace == '[' || a:brace == ']'
		return '['
	endif
	return '('
endfunction
" gets the closing brace of the given brace
function! s:get_closing_brace(brace) abort
	if a:brace == '[' || a:brace == ']'
		return ']'
	endif
	return ')'
endfunction
"________________________________________OPEN_BRACE_COMPLETION________________________________________"
" autocompletes open
inoremap <expr> [ <sid>autocomplete_open_brace('[') ? '[]<LEFT>' : '['
inoremap <expr> ( <sid>autocomplete_open_brace('(') ? '()<LEFT>' : '('
function! s:autocomplete_open_brace(brace) abort
	let line = split(getline('.'), '\zs')
	echom "___line = " . string(line)
	let length = len(line)
	let cursdex = col('.')-1
	let opening_brace = a:brace
	let closing_brace = s:get_closing_brace(opening_brace)
	" create depth array
	let depth_arr = []
	let depth = 0
	let most_negative_number_before_cursdex = 0
	let most_negative_number = 0
	for index in range(length)
		let character = line[index]
		if character == opening_brace
			let depth += 1
		elseif character == closing_brace
			let depth -= 1
		endif
		let depth_arr += [depth]
		if index < cursdex
			let most_negative_number_before_cursdex = min([most_negative_number_before_cursdex, depth])
		endif
		let most_negative_number = min([most_negative_number, depth])
	endfor
	" check if contains a number less than 0. if so, then we likely shouldn't add a completing brace
	if most_negative_number < 0
		let to_add = abs(most_negative_number_before_cursdex)
		for index in range(cursdex+1, length-1)
			echom "index = " . index
			if depth_arr[index] + to_add < 0
				return 0 " don't autocomplete brace
			endif
		endfor
	endif
	return 1 " do autocomplete the brace
endfunction
"________________________________________CLOSE_BRACE_COMPLETION________________________________________
" makes sure close braces have friends
inoremap <expr> ) <sid>add_close_brace(')') ? ')' : '<RIGHT>'
inoremap <expr> ] <sid>add_close_brace(']') ? ']' : '<RIGHT>'
function! s:add_close_brace(brace) abort
	" first check if cursor resting on a brace
	let curs_char = s:curs_char()
	if curs_char != ']' && curs_char != ')'
	 	return 1 " if user is not on a brace, we don't care	-> add brace
	endif
	" check if creating the given brace will have a buddy if created
	let line = split(getline('.') . " ", '\zs')
	let length = len(line)
	let cursdex = col('.')-1
	let closing_brace = a:brace
	let opening_brace = s:get_opening_brace(closing_brace)
	" create depth array
	let depth_arr = []
	let depth = 0
	let most_negative_number_before_cursdex = 0
	let most_negative_number = 0
	for index in range(length)
		let character = line[index]
		if character == opening_brace
			let depth += 1
		elseif character == closing_brace
			let depth -= 1
		endif
		let depth_arr += [depth]
		if index < cursdex
			let most_negative_number_before_cursdex = min([most_negative_number_before_cursdex, depth])
		endif
		let most_negative_number = min([most_negative_number, depth])
	endfor
	" to_add = number to add to final number to make the most negative number = 0
	let to_add = 0
	if most_negative_number < 0
		let to_add = abs(most_negative_number_before_cursdex)
	endif
echom string(depth_arr)
	" if last depth (equalized by summing to_add) > 0, then adding closing brace will be beneficial
	if depth_arr[-1] + to_add > 0
		echom "add brace: " . depth_arr[-1] . " > 0"
		return 1 " do add a brace
	else
		echom "don't add brace: " . depth_arr[-1] . " <= 0"
		return 0 " don't add a brace
	endif
	return 1 " do add a closing brace
endfunction
"________________________________________BRACE_DELETION________________________________________
" if backspace on brace, must check if brace has a friend. if so -> remove self and friend
inoremap <BS> <c-r>=BS_Brace()<CR>
function! BS_Brace() abort	
	let pc = col('.')-2 "pc = pre_cursor index, the index before the cursor
	if pc == -1
		return "\<BS>"
	endif
	let line = getline('.') . " "
	let pre_curs = split(line, '\zs')[pc]
	if index(['[', ']', '(', ')'], pre_curs) >= 0
		" search for this bracket's mate
		let closing_brace = (pre_curs == '[' || pre_curs == ']') ? ']' : ')'
		let opening_brace = closing_brace == ']' ? '[' : '('
		let mate = pre_curs == closing_brace ? opening_brace : closing_brace
		let mate_index = s:seek_mate(pc, mate, line)
		" if not -1, mate exists and thus we must remove it
		if mate_index != -1
			" get start and end indices 
			let start = min([mate_index, pc])
			let end = start == pc ? mate_index : pc
			" construct str: the line removing those braces
			let p1 = start == 0 ? '' : line[:start-1]
			let p2 = line[start+1:end-1]
			let p3 = line[end+1:-2]
			let str = p1 ."". p2 ."". p3
			" get pos of cursor
			let pos = len(p1)
			if !s:is_opening_brace(pre_curs)
				"if pre_curs == ']' || pre_curs == ')'
				let pos += len(p2)
			endif
			if pos == 0
				return "\<ESC>\<END>v\<HOME>xi" . str . "\<ESC>\<HOME>i"
			elseif pos == len(str)			
				return "\<ESC>\<END>v\<HOME>xi" . str . "\<ESC>i\<END>"
			else
				return "\<ESC>\<END>v\<HOME>xi" . str . "\<ESC>\<HOME>" . (pos) . "li"
			endif
		endif
	endif
	return "\<BS>"
endfunction
" gets the index of the given brace if it exists, else returns -1. 
function! s:seek_mate(index, mate, line_string) abort
	" get the brace
	let line = s:str_list(a:line_string)
	let length = len(line)
	let brace = line[a:index]
	let closing_brace = s:get_closing_brace(brace)
	let opening_brace = s:get_opening_brace(brace)
	let depth = 0 " the depth of the wrapper: in (()(index)), index has depth 2
	if s:is_opening_brace(brace) " if is opening brace
		" look for mate to the right
		let currdex = a:index+1
		while currdex < length
			let currbrace = line[currdex]
			" if we have found the end
			if currbrace == closing_brace
				" if depth 0, we are done. else decrease depth
				if depth == 0
					" then we are done
					return currdex
				else
					" decrease depth
					let depth -= 1
				endif
			" if we found an opening brace, increase depth
			elseif currbrace == opening_brace
				let depth += 1
			endif
			let currdex += 1
		endwhile
	else " must be closing brace
		" look for mate to the left
		let currdex = a:index-1
		while currdex >= 0
			let currbrace = line[currdex]
			" if we have found and end brace, decrease depth
			if currbrace == closing_brace
				let depth -= 1
			" if we found an opening brace, increase depth
			elseif currbrace == opening_brace
				" if depth 0, we are done. else increase depth
				if depth == 0
					" then we are done
					return currdex
				else
					" increase depth
					let depth += 1
				endif
			endif
			let currdex -= 1
		endwhile
	endif
	" thus we have not found the mate
	return -1
endfunction
"TODO: when in visual mode, if highlighted and presses wrapper, wrap selected text in wrapper
"TODO: make that when ' is pressed, only spawn end brace if not in '"' brace
inoremap ' ''<ESC>i
